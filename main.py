import os
import logging
import asyncio
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    ContextTypes,
    filters,
)

BOT_TOKEN    = os.environ["TELEGRAM_BOT_TOKEN"]
LOG_CHAT_ID  = int(os.environ["LOG_CHAT_ID"])
WEBHOOK_URL  = os.environ["WEBHOOK_URL"]  # https://<your>.onrender.com

logging.basicConfig(level=logging.INFO)

app = Flask(__name__)

application = (
    ApplicationBuilder()
    .token(BOT_TOKEN)
    .build()
)

# –û–±—Ä–æ–±–Ω–∏–∫
async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message
    header = (
        f"‚úâÔ∏è –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {user.full_name} (@{user.username})\n"
        f"üÜî {user.id}  üïì {message.date}\n"
    )

    if message.text:
        await context.bot.send_message(
            chat_id=LOG_CHAT_ID,
            text=header + f"\nüìÑ –¢–µ–∫—Å—Ç:\n{message.text}"
        )

    if message.photo:
        file_id = message.photo[-1].file_id
        await context.bot.send_photo(
            chat_id=LOG_CHAT_ID,
            photo=file_id,
            caption=header + f"\nüñº –§–æ—Ç–æ: {message.caption or '‚Äî'}"
        )

    if message.video:
        file_id = message.video.file_id
        await context.bot.send_video(
            chat_id=LOG_CHAT_ID,
            video=file_id,
            caption=header + f"\nüé• –í—ñ–¥–µ–æ: {message.caption or '‚Äî'}"
        )

    if message.document:
        file_id = message.document.file_id
        await context.bot.send_document(
            chat_id=LOG_CHAT_ID,
            document=file_id,
            caption=header + f"\nüìé –§–∞–π–ª: {message.document.file_name}"
        )

    await message.reply_text("–î—è–∫—É—î–º–æ, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!")

# –î–æ–¥–∞—î–º–æ —Ö–µ–Ω–¥–ª–µ—Ä
application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all))

# Webhook endpoint
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook_handler():
    data = request.get_json(force=True)
    update = Update.de_json(data, application.bot)

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É loop
    asyncio.create_task(application.process_update(update))

    return "OK"

if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook —ñ –∑–∞–ø—É—Å–∫–∞—î–º–æ Flask
    async def setup():
        await application.initialize()
        await application.bot.set_webhook(f"{WEBHOOK_URL}/{BOT_TOKEN}")
        await application.start()
        await application.updater.start_polling()  # –Ω–µ –∑–∞–ø—É—Å–∫–∞—î polling, –∞–ª–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        print("‚úÖ Webhook set")

    asyncio.get_event_loop().run_until_complete(setup())
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
