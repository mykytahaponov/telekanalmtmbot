import os
import logging
import threading
import requests
from flask import Flask, request

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì –ö–æ–Ω—Ñ—ñ–≥ –∑ Environment ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì
BOT_TOKEN   = os.environ["TELEGRAM_BOT_TOKEN"]
LOG_CHAT_ID = os.environ["LOG_CHAT_ID"]
WEBHOOK_URL = os.environ["WEBHOOK_URL"]  # https://telekanalmtmbot.onrender.com
API_URL     = f"https://api.telegram.org/bot{BOT_TOKEN}"

# In-memory —Ç—Ä–µ–∫–µ—Ä–∏ —Å—Ç–∞–Ω—É —Ç–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü—ñ—ó –º–µ–¥—ñ–∞
user_states  = {}
media_groups = {}  # media_group_id -> list of media items

logging.basicConfig(level=logging.INFO)
app = Flask(__name__)

# Health-check –¥–ª—è UptimeRobot
@app.route("/", methods=["GET"])
def health():
    return "OK", 200

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑—ñ–±—Ä–∞–Ω–æ–≥–æ –∞–ª—å–±–æ–º—É
def flush_media_group(group_id):
    items = media_groups.pop(group_id, [])
    if not items:
        return
    requests.post(f"{API_URL}/sendMediaGroup", json={
        "chat_id": LOG_CHAT_ID,
        "media": items
    })

# Webhook-–µ–Ω–¥–ø–æ–π–Ω—Ç
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    data = request.get_json(force=True)
    logging.info(f"Incoming update: {data}")

    msg = data.get("message") or data.get("edited_message")
    if not msg:
        return "OK", 200

    chat_id = msg["chat"]["id"]
    text    = msg.get("text", "")

    # 1) /start ‚Üí –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫
    if text.strip() == "/start":
        greeting = (
            "–í—ñ—Ç–∞—î–º–æ –≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—ñ —Ç–µ–ª–µ–∫–∞–Ω–∞–ª—É –ú–¢–ú!\n"
            "–ö–µ—Ä—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ ‚¨áÔ∏è"
        )
        keyboard = {
            "keyboard": [
                ["üìÑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É", "üìã –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é"],
                ["‚ùóÔ∏è –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫—É –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ"]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }
        requests.post(f"{API_URL}/sendMessage", json={
            "chat_id": chat_id,
            "text": greeting,
            "reply_markup": keyboard
        })
        user_states.pop(chat_id, None)
        return "OK", 200

    # 2) –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    if text.strip() in ("üìÑ –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–≤–∏–Ω—É"):
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id,
            "text": "–ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—à—É –Ω–æ–≤–∏–Ω—É! –í–æ–Ω–∞ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ —Ñ–∞–π–ª/–¥–æ–∫—É–º–µ–Ω—Ç."})
        user_states[chat_id] = "news"
        return "OK", 200

    if text.strip() in ("üìã –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é", "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–µ—Ç–∏—Ü—ñ—é"):
        petition_text = (
            "‚ùóÔ∏è –î–æ –Ω–∞—Å –ø–æ—Å—Ç—ñ–π–Ω–æ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è —Ä–æ–¥–∏—á—ñ –∑–∞–≥–∏–±–ª–∏—Ö –ì–µ—Ä–æ—ó–≤ –∑ –ø—Ä–æ—Ö–∞–Ω–Ω—è–º–∏ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ —ó—Ö–Ω—ñ –ø–µ—Ç–∏—Ü—ñ—ó.\n\n"
            "–ú–∏ —É—Å–≤—ñ–¥–æ–º–ª—é—î–º–æ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –∫—Ä–æ–∫—É. –¢–æ–∂ –ø—É–±–ª—ñ–∫—É—î–º–æ –ø–µ—Ç–∏—Ü—ñ—ó, –∞–±–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ "
            "–∑–∞–ø–æ—Ä—ñ–∂—Ü—ñ–≤ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∞–ª–∏ —ó—Ö, –∞ –π –∑–Ω–∞–ª–∏ –≤–ª–∞—Å–Ω–∏—Ö –ì–µ—Ä–æ—ó–≤ —ñ –ì–µ—Ä–æ—ó–Ω—å –≤ –æ–±–ª–∏—á—á—è.\n\n"
            "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∞ —Å—É–ø—Ä–æ–≤–æ–¥–∂—É–≤–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ì–µ—Ä–æ—è –∞–±–æ –ì–µ—Ä–æ—ó–Ω—é, "
            "—ñ –º–∏ –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ —ó—ó –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó."
        )
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": petition_text})
        user_states[chat_id] = "petition"
        return "OK", 200

    if text.strip() in ("‚ùóÔ∏è –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫—É –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ", "–Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –ø–æ–º–∏–ª–∫—É –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ"):
        error_prompt = (
            "–ù–∞–¥—Å–∏–ª–∞–π—Ç–µ –Ω–∞–º —Å–∫—Ä—ñ–Ω—à–æ—Ç, –æ–ø–∏—Å, —Ç–∞–π–º–∫–æ–¥ –ø–æ–º–∏–ª–∫–∏ "
            "(—è–∫—â–æ —Ü–µ —Ç–µ–ª–µ–≤—ñ–∑—ñ–π–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª), —ñ –º–∏ —É—Å—É–Ω–µ–º–æ –≤—Å—ñ –Ω–µ–¥–æ–ª—ñ–∫–∏."
        )
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": error_prompt})
        user_states[chat_id] = "error"
        return "OK", 200

    # –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    state = user_states.get(chat_id)
    user  = msg.get("from", {})
    header = f"‚úâÔ∏è –ù–æ–≤–µ –≤—ñ–¥ {user.get('first_name','')} (@{user.get('username','')})\n"

    # 3) –ì—Ä—É–ø—É–≤–∞–Ω–Ω—è –º–µ–¥—ñ–∞
    if "media_group_id" in msg:
        group_id = msg["media_group_id"]
        buffer = media_groups.setdefault(group_id, [])
        if "photo" in msg:
            item = {"type": "photo", "media": msg["photo"][-1]["file_id"]}
        elif "video" in msg:
            item = {"type": "video", "media": msg["video"]["file_id"]}
        elif "document" in msg:
            item = {"type": "document", "media": msg["document"]["file_id"]}
        else:
            return "OK", 200
        if msg.get("caption") and not buffer:
            item["caption"] = header + msg["caption"]
        buffer.append(item)
        if len(buffer) == 1:
            threading.Timer(1.0, flush_media_group, args=(group_id,)).start()
        # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        reply = {"news": "–ü—Ä–∏–π–Ω—è–ª–∏ –Ω–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –¥—è–∫—É—î–º–æ!",
                 "petition": "–î—è–∫—É—î–º–æ –≤–∞–º –∑–∞ —Ü–µ–π –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫. –ü–∞–º º—è—Ç–∞—î–º–æ –∫–æ–∂–Ω–æ–≥–æ —Ç–∞ –∫–æ–∂–Ω—É.",
                 "error": "–î—è–∫—É—î–º–æ –∑–∞ —É–≤–∞–≥—É —Ç–∞ –≤–∞—à—É —Ü—ñ–∫–∞–≤—ñ—Å—Ç—å!"}.get(state, "–ü—Ä–∏–π–Ω—è–ª–∏ –Ω–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –¥—è–∫—É—î–º–æ!")
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": reply})
        return "OK", 200

    # 4) –û–¥–∏–Ω–æ—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if "text" in msg:
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": LOG_CHAT_ID, "text": header + msg["text"]})
    elif "photo" in msg:
        requests.post(f"{API_URL}/sendPhoto", json={"chat_id": LOG_CHAT_ID, "photo": msg["photo"][-1]["file_id"], "caption": header})
    elif "video" in msg:
        requests.post(f"{API_URL}/sendVideo", json={"chat_id": LOG_CHAT_ID, "video": msg["video"]["file_id"], "caption": header})
    elif "document" in msg:
        requests.post(f"{API_URL}/sendDocument", json={"chat_id": LOG_CHAT_ID, "document": msg["document"]["file_id"], "caption": header})
    else:
        requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É."})
        return "OK", 200

    # 5) –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    reply = {"news": "–ü—Ä–∏–π–Ω—è–ª–∏ –Ω–∞ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –¥—è–∫—É—î–º–æ!",
             "petition": "–î—è–∫—É—î–º–æ –≤–∞–º –∑–∞ —Ü–µ–π –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫. –ü–∞–º º—è—Ç–∞—î–º–æ –∫–æ–∂–Ω–æ–≥–æ —Ç–∞ –∫–æ–∂–Ω—É.",
             "error": "–î—è–∫—É—î–º–æ –∑–∞ —É–≤–∞–≥—É —Ç–∞ –≤–∞—à—É —Ü—ñ–∫–∞–≤—ñ—Å—Ç—å!"}.get(state, "–î—è–∫—É—î–º–æ, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ!")
    requests.post(f"{API_URL}/sendMessage", json={"chat_id": chat_id, "text": reply})
    user_states.pop(chat_id, None)
    return "OK", 200

if __name__ == "__main__":
    # –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è webhook
    resp = requests.post(f"{API_URL}/setWebhook", json={"url": f"{WEBHOOK_URL}/{BOT_TOKEN}"}).json()
    logging.info(f"setWebhook response: {resp}")
    
    # –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)
